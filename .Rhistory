predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_3_BCell"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,c("B_cell_score", "plasmablast_score")])),decreasing = T)[1])
== "B_cell_score"){
predicted_class <- "B Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,c("B_cell_score", "plasmablast_score")])),decreasing = T)[1])
== "plasmablast_score"){
predicted_class <- "Plasmablast"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_CD4_CD8"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "CD4+ T cell"){
predicted_class <- "CD4+ T cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "CD8+ T cell"){
predicted_class <- "CD8+ T cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_CD4"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Naive CD4 T cells"){
predicted_class <- "Naive CD4+ T cells"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Temra CD4 T cells"){
predicted_class <- "Terminally differentiated effector CD4+ T cells"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Tfh/Th1 CD4 T cells"){
predicted_class <- "Tfh/Th1 helper CD4+ T cells"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Treg"){
predicted_class <- "T regulatory cells"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_CD8_NK"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "CD8+ T cell"){
predicted_class <- "CD8+ T cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Natural killer cell"){
predicted_class <- "Natural killer cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_CD8"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Naive CD8 T cells"){
predicted_class <- "Naive CD8+ T cells"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "MAIT"){
predicted_class <- "MAIT cells"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Exausted CD8 T cells"){
predicted_class <- "Exhausted CD8+ T cells"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_2_non_blood"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}else if(names(sort(unlist(as.vector(layer_predictions[,c("stromal_score","non_stromal_score","Oligodendrocytes", "Glial Cells" )])),decreasing = T)[1])
== "stromal_score"){
predicted_class <- "Stromal Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,c("stromal_score","non_stromal_score","Oligodendrocytes", "Glial Cells" )])),decreasing = T)[1])
== "non_stromal_score"){
predicted_class <- "Non Stromal Cell"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_3_non_stromal"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "soft_tissue_neuro_score"){
predicted_class <- "Soft Tissue or Neuro Cancer Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "non_GI_score"){
predicted_class <- "Non GI Epithelial Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "GI_score"){
predicted_class <- "GI Epithelial Cell"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_non_GI"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "ov_endo_kid_score"){
predicted_class <- "Ovarian/Endometrial/Kidney Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "breast_lung_prostate_score"){
predicted_class <- "Breast/Lung/Prostate Cell"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_GI"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "billiary_score"){
predicted_class <- "Billiary Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "digestive_score"){
predicted_class <- "Colorectal/Esophageal/Gastric Cell"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_ov_endo_kid"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Ovarian Cancer"){
predicted_class <- "Ovarian Cancer Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Endometrial/Uterine Cancer"){
predicted_class <- "Endometrial Cancer Cell"
}else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Kidney Cancer"){
predicted_class <- "Kidney Cancer Cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_breast_lung_prostate"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Breast Cancer"){
predicted_class <- "Breast Cancer Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Lung Cancer"){
predicted_class <- "Lung Cancer Cell"
}else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "Prostate Cancer"){
predicted_class <- "Prostate Cancer Cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_6_breast"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "TNBC"){
predicted_class <- "TNBC Breast Cancer Cell"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "HER2+"){
predicted_class <- "Her2+ Breast Cancer Cell"
}else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "ER+"){
predicted_class <- "ER+ Breast Cancer Cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_biliary"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_3_stromal"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
} else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "fibroblasts_score"){
predicted_class <- "Fibroblasts"
}else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "cancer_associated_fibroblast_score"){
predicted_class <- "Cancer Associated Fibroblasts"
}else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_soft_tissue_neuro"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "soft_tissue_neuro_score"){
predicted_class <- "Soft Tissue or Neuro Cancer Cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_soft_tissue_neuro"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "brain_nbm_score"){
predicted_class <- "Brain/Neuroblastoma Cancer Cell"
} else if(names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
== "soft_tissue_score"){
predicted_class <- "Soft Tissue Cancer Cell"
} else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_digestive"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_6_brain_nbm"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_6_soft_tissue"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_dendritic"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_macrophage"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_4_CAF"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_cDC"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_macrophage"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
if(layer == "layer_5_monocyte"){
if(levels(as.factor(is.na(layer_predictions) %in% TRUE))){
predicted_class <- "Cell low quality"
}
else{
predicted_class <- names(sort(unlist(as.vector(layer_predictions[,colnames(layer_predictions)[which(lapply(layer_predictions, class) == "numeric")]])), decreasing = T)[1])
}
}
return(predicted_class)
}
layer_predictions <- classify_cells_RNA_no_scale(rna_counts = rna_counts, imputation = imputation,
genes_in_model = genes_in_model,
model = model, cells_to_use = cells_to_use,
ref_based = ref_based, normalized_counts=normalized_counts, mc.cores = mc.cores)
layer_predictions <- add_class_per_layer(layer_predictions = layer_predictions,
layer = layer)
predicted_class <- unlist(parallel::mclapply(row.names(layer_predictions),
score_class_test, predictions = layer_predictions,
layer = layer, mc.cores = mc.cores), use.names = F)
layer_predictions <- cbind(layer_predictions, predicted_class)
layer_predictions$predicted_class <- as.character(predicted_class)
threshold_per_class <- get_auto_threshold(layer_predictions, mc.cores=mc.cores)
predicted_tissue_with_cutoff <- unlist(parallel::mclapply(row.names(layer_predictions),
add_unclassified_automatic_threshold, predictions = layer_predictions,
layer = layer, threshold_use = threshold_per_class,
mc.cores = mc.cores), use.names = F)
layer_predictions <- cbind(layer_predictions, predicted_tissue_with_cutoff)
View(layer_predictions)
devtools::document()
devtools::install()
usethis::use_version()
devtools::document()
usethis::use_version()
usethis::use_version()
?CNA.MCMC
library(copykat)
?CNA.MCMC
CNA.MCMC
library(scATOMIC)
library(plyr)
library(dplyr)
library(data.table)
library(randomForest)
library(caret)
library(parallel)
library(reticulate)
library(Rmagic)
library(Matrix)
library(Seurat)
library(agrmt)
library(cutoff.scATOMIC)
library(copykat)
library(ggplot2)
allres = readRDS("~/Downloads/allmat.rds")
dim(allres)
head(allres)
View(as.data.frame(row.names(allres)))
cell_predictions <- run_scATOMIC(allres)
dim(allmat)
allmat = readRDS("~/Downloads/allmat.rds")
dim(allmat)
pct_mt <- colSums(allmat[grep("^MT-", row.names(allmat)),])/colSums(allmat) * 100
nFeatureRNA <- colSums(allmat > 0)
allmat <- allmat[, names(which(pct_mt < 25))]
allmat <- allmat[, intersect(names(which(nFeatureRNA > 500)), colnames(allmat))]
dim(allmat)
nCell <- rowSums(allmat > 0)
summary(nCell)
nCell
#only keep genes with > than 10 cells
allmat <- allmat[names(which(nCell > 10)), ]
dim(allmat)
dim(unique(allmat))
dim(unique(as.matrix(allmat)))
View(as.data.frame(row.names(allres)))
devtools::document()
devtools::install()
\
library(scATOMIC)
library(ggplot2)
#library(Matrix)
lung_cancer_demo_data <- demo_lung_data
pct_mt <- colSums(lung_cancer_demo_data[grep("^MT-", row.names(lung_cancer_demo_data)),])/colSums(lung_cancer_demo_data) * 100
nFeatureRNA <- colSums(lung_cancer_demo_data > 0)
lung_cancer_demo_data <- lung_cancer_demo_data[, names(which(pct_mt < 25))]
lung_cancer_demo_data <- lung_cancer_demo_data[, intersect(names(which(nFeatureRNA > 500)), colnames(lung_cancer_demo_data))]
cell_predictions <- run_scATOMIC(lung_cancer_demo_data, confidence_cutoff = T)
results_lung <- create_summary_matrix(prediction_list = cell_predictions, use_CNVs = F, modify_results = T, mc.cores = 1, raw_counts = lung_cancer_demo_data, min_prop = 0.5, confidence_cutoff = T)
library(Seurat)
lung_seurat <- CreateSeuratObject(lung_cancer_demo_data, meta.data = results_lung)
#run seurat pipeline
lung_seurat <- NormalizeData(lung_seurat)
lung_seurat <- FindVariableFeatures(lung_seurat)
lung_seurat <- ScaleData(lung_seurat)
lung_seurat <- RunPCA(lung_seurat, features = VariableFeatures(object = lung_seurat))
lung_seurat <- RunUMAP(lung_seurat, dims = 1:50)
lung_seurat <- FindNeighbors(lung_seurat)
lung_seurat <- FindClusters(lung_seurat)
DimPlot(lung_seurat, group.by = "scATOMIC_pred") + ggtitle("Lung Demo Dataset") + labs(fill="scATOMIC Annotations")
cell_predictions <- run_scATOMIC(lung_cancer_demo_data, confidence_cutoff = F)
devtools::document()
devtools::install()
library(scATOMIC)
library(ggplot2)
#library(Matrix)
lung_cancer_demo_data <- demo_lung_data
pct_mt <- colSums(lung_cancer_demo_data[grep("^MT-", row.names(lung_cancer_demo_data)),])/colSums(lung_cancer_demo_data) * 100
nFeatureRNA <- colSums(lung_cancer_demo_data > 0)
lung_cancer_demo_data <- lung_cancer_demo_data[, names(which(pct_mt < 25))]
lung_cancer_demo_data <- lung_cancer_demo_data[, intersect(names(which(nFeatureRNA > 500)), colnames(lung_cancer_demo_data))]
cell_predictions <- run_scATOMIC(lung_cancer_demo_data, confidence_cutoff = F)
results_lung <- create_summary_matrix(prediction_list = cell_predictions, use_CNVs = F, modify_results = T, mc.cores = 1, raw_counts = lung_cancer_demo_data, min_prop = 0.5, confidence_cutoff = F)
library(Seurat)
lung_seurat <- CreateSeuratObject(lung_cancer_demo_data, meta.data = results_lung)
#run seurat pipeline
lung_seurat <- NormalizeData(lung_seurat)
lung_seurat <- FindVariableFeatures(lung_seurat)
lung_seurat <- ScaleData(lung_seurat)
lung_seurat <- RunPCA(lung_seurat, features = VariableFeatures(object = lung_seurat))
lung_seurat <- RunUMAP(lung_seurat, dims = 1:50)
lung_seurat <- FindNeighbors(lung_seurat)
lung_seurat <- FindClusters(lung_seurat)
DimPlot(lung_seurat, group.by = "scATOMIC_pred") + ggtitle("Lung Demo Dataset") + labs(fill="scATOMIC Annotations")
View(results_lung)
View(cell_predictions$layer_3_stromal)
View(cell_predictions$layer_4_CAF)
load(paste0("~/Documents/classifier_outputs_ensembl/","layer_5_macrophage.RData"))
top_genes_unlisted_layer_6_macrophage <- top_genes_unlisted
model_layer_6_macrophage <- rf_classifier_cell_lines
usethis::use_data(top_genes_unlisted_layer_6_macrophage, overwrite = TRUE)
usethis::use_data(model_layer_6_macrophage, overwrite = TRUE)
rm(list = ls())
load(paste0("~/Documents/classifier_outputs_ensembl/","layer_5_monocyte.RData"))
top_genes_unlisted_layer_6_monocyte <- top_genes_unlisted
model_layer_6_monocyte <- rf_classifier_cell_lines
usethis::use_data(top_genes_unlisted_layer_6_monocyte, overwrite = TRUE)
usethis::use_data(model_layer_6_monocyte, overwrite = TRUE)
rm(list = ls())
load(paste0("~/Documents/neutrophil_classifier/outs/ensembl_classifier_layer_5_macrophage_neutrophil.RData"))
top_genes_unlisted_layer_5_macrophage_neutrophil <- top_genes_unlisted
model_layer_5_macrophage_neutrophil <- rf_classifier_cell_lines
usethis::use_data(top_genes_unlisted_layer_5_macrophage_neutrophil, overwrite = TRUE)
usethis::use_data(model_layer_5_macrophage_neutrophil, overwrite = TRUE)
rm(list = ls())
load(paste0("~/Documents/neutrophil_classifier/outs/ensembl_classifier_layer_5_monocyte_neutrophil.RData"))
top_genes_unlisted_layer_5_monocyte_neutrophil <- top_genes_unlisted
model_layer_5_monocyte_neutrophil <- rf_classifier_cell_lines
usethis::use_data(top_genes_unlisted_layer_5_monocyte_neutrophil, overwrite = TRUE)
usethis::use_data(model_layer_5_monocyte_neutrophil, overwrite = TRUE)
rm(list = ls())
devtools::document(())
devtools::document()
devtools::install()
library(scATOMIC)
library(ggplot2)
#library(Matrix)
lung_cancer_demo_data <- demo_lung_data
pct_mt <- colSums(lung_cancer_demo_data[grep("^MT-", row.names(lung_cancer_demo_data)),])/colSums(lung_cancer_demo_data) * 100
nFeatureRNA <- colSums(lung_cancer_demo_data > 0)
lung_cancer_demo_data <- lung_cancer_demo_data[, names(which(pct_mt < 25))]
lung_cancer_demo_data <- lung_cancer_demo_data[, intersect(names(which(nFeatureRNA > 500)), colnames(lung_cancer_demo_data))]
cell_predictions <- run_scATOMIC(lung_cancer_demo_data, confidence_cutoff = F)
results_lung <- create_summary_matrix(prediction_list = cell_predictions, use_CNVs = F, modify_results = T, mc.cores = 1, raw_counts = lung_cancer_demo_data, min_prop = 0.5, confidence_cutoff = F)
library(Seurat)
lung_seurat <- CreateSeuratObject(lung_cancer_demo_data, meta.data = results_lung)
#run seurat pipeline
lung_seurat <- NormalizeData(lung_seurat)
lung_seurat <- FindVariableFeatures(lung_seurat)
lung_seurat <- ScaleData(lung_seurat)
lung_seurat <- RunPCA(lung_seurat, features = VariableFeatures(object = lung_seurat))
lung_seurat <- RunUMAP(lung_seurat, dims = 1:50)
lung_seurat <- FindNeighbors(lung_seurat)
lung_seurat <- FindClusters(lung_seurat)
DimPlot(lung_seurat, group.by = "scATOMIC_pred") + ggtitle("Lung Demo Dataset") + labs(fill="scATOMIC Annotations")
View(results_lung)
cell_predictions <- run_scATOMIC(lung_cancer_demo_data, confidence_cutoff = T)
results_lung <- create_summary_matrix(prediction_list = cell_predictions, use_CNVs = F, modify_results = T, mc.cores = 1, raw_counts = lung_cancer_demo_data, min_prop = 0.5, confidence_cutoff = T)
View(results_lung)
library(Seurat)
lung_seurat <- CreateSeuratObject(lung_cancer_demo_data, meta.data = results_lung)
#run seurat pipeline
lung_seurat <- NormalizeData(lung_seurat)
lung_seurat <- FindVariableFeatures(lung_seurat)
lung_seurat <- ScaleData(lung_seurat)
lung_seurat <- RunPCA(lung_seurat, features = VariableFeatures(object = lung_seurat))
lung_seurat <- RunUMAP(lung_seurat, dims = 1:50)
lung_seurat <- FindNeighbors(lung_seurat)
lung_seurat <- FindClusters(lung_seurat)
DimPlot(lung_seurat, group.by = "scATOMIC_pred") + ggtitle("Lung Demo Dataset") + labs(fill="scATOMIC Annotations")
View(cell_predictions[["layer_5_macrophage_neutrophil"]])
devtools::document()
devtools::install()
